Quick Reference

;I/O data handling
SET   - Set( xx ) -> $               //Write a 8bits value to a Register
GETA  - ReadAddr( @xx ) ->$          //Fetch a value from RAM at a specific 8 bits address to store in a Register
GETR  - ReadReg( @$ ) ->$            //Fetch a value from RAM at an address in a Register to store in an other Register
SETA  - WriteAddr( @xx ) <- $        //Write to RAM at a specific 8 bits address, a value from a Register
SETR  - WriteReg( @$ ) <- $          //Write to RAM at an address in a Register, a value from a Register
SETV  - WriteVal( @$ ) <- xx         //Write to RAM at an address in a Register, a 8bits value

;Conditional branches
IFNZ  - IfNotZero( $ ) goto#xx       //Branches if a Register != 0, Goto a relative 8 bits address
IFZ   - IfZero( $ ) goto#xx          //Branches if a Register == 0, Goto a relative 8 bits address
IFZR  - IfZeroReg( $ ) goto#$        //Branches if a Register == 0, Goto a relative address stored in a Register
SIFNZ - SkipNotZero( $ )             //Skip the following instruction if a Register != 0
SIFZ  - SkipZero( $ )                //Skip the following instruction if a Register == 0
SIF   - SkipIf( $ = xx )             //Skip the following instruction if a Register == a 8bits value
SEQ   - SkipEqual( $ = $ )           //Skip the following instruction if a Register == an other Register
SGRT  - SkipGreater( $ > $ )         //Skip the following instruction if a Register > an other Register
SIFNC - SkipNotCarry( )              //Skip the following instruction if the Carry Flag is set
DSIZ  - DecSkipZero( $ )             //Decrement a Register by 1 if != 0, otherwise skip the following instruction if that Register == 0
DSINZ - DecSkipNotZero( $ )          //Decrement a Register by 1 and then skip the following instruction if that Register != 0

;Unconditional branches
JMPA  - JumpAddr( ) goto#xx          //Goto a relative 8 bits address
JMPR  - JumpReg( ) goto#$            //Goto a relative address stored in a Register
WJMP  - WideJump( ) goto#0000 + xxx  //Goto an absolute 12 bits address xxx (limited range, first 4K of ROM)
WJMPV - WideJumpVal( ) goto#$H + xx  //Goto an absolute 16 bits address stored in a Register plus a given value xx (full 64K range)
WJMPR - WideJumpReg( ) goto#$H + $L  //Goto an absolute 16 bits address stored in 2 Registers (full 64K range)

;Arithmetics 
ADD   - Add( $ + $ ) -> $            //Add the value from 2 Registers and stores the result in an other Register
SUB   - Subtract( $ - $) -> $        //Substract the value from 2 Registers and stores the result in an other Register
INC   - Increment( $ )               //Increment a Register by 1 and stores the result in $D
DEC   - Decrement( $ )               //Decrement a Register by 1 and stores the result in $D
GRT   - Greatest( $ ? $) -> $        //Take the greatest value between 2 given Registers and set it to an other Register

;Bitwise operations
AND   - And( $ & $ ) -> $            //Take the conjunction of 2 Registers in an other Register
OR    - Or( $ | $ ) -> $             //Take the disjunction of 2 Registers in an other Register
XOR   - Xor( $ ^ $ ) -> $            //Take the exclusive disjunction of 2 Registers in an other Register
NOT   - Not( $ ) -> $                //Take the negation of a Register in an other Register
LSHT  - LeftShift( $ ) -> $          //Left Shift (the droped bit is sent to the carry flag)
RSHT  - RightShift( $ ) -> $         //Logical Right Shift (insert zero) (the droped bit is sent to the carry flag)
RSHTA - RightArSht( $ ) -> $         //Arithmetic Right Shift (insert one) (the droped bit is sent to the carry flag)
LROT  - LeftRotate( $ ) -> $         //Circular Left Shift (Left Rotate)
RROT  - RightRotate( $ ) -> $        //Circular Right Shift (Right Rotate)
LROTC - LeftCrRot( $ ) -> $          //Circular Left Shift through Carry (Left Carry Rotate)
RROTC - RightCrRot( $ ) -> $         //Circular Right Shift through Carry (Right Carry Rotate)

;Internal data handling
PUSH  - Push( $ )                    //Push $D to the top of the internal stack (it is 16 bytes deep, the overflow is dropped )
POP   - Pop( $ )                     //Pop the value from the top of the internal stack to $D  (it is 16 bytes deep, the overflow is dropped )
CPY   - COPY( $ ) -> $               //* Alias for OR($,$X)->$D where $X is the fixed value register 0x00000000
RST   - RESET( $ )                   //* Alias for AND($X,$Y)->$ where $X and $Y are the fixed value register 0x00000000 and 0x11111111
CFLG  - CarryFlg( ) -> $             //Output the value of the Carry Flag to a register
RSTC  - ResetCarry( )                //Set the Carry Flag to 0x00
SETC  - SetCarry( )                  //Set the Carry Flag to 0x01
RSTAR - ResetAllReg( )               //Set all Registres to 0x00
FLUSH - FlushStack( )                //Set all values stored in the Stack to 0x00
RND   - Random( ) -> $               //Set a Register to a Random value using a 16 bits LFSR

;Others
NOP   - NOP()                        //Does nothing D:
HALT  - HALT()                       //Pull pin 29 up to Halts the CPU until Pin 39 is set low
