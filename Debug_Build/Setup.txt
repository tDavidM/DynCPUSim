-CPU
 8 bits operations
 16 bits instructions
 11 x 8 bits general purpose registers
 44 instructions
 1 cycle per instruction

-ROM/Program Memory 
 16 bits/pins instructions (CPU input pins 1-16)
 *Relative addresss
  8 bits/pins adresses (CPU output pins 51-58)
  1 pin for Ready Next (CPU output pins 50)
  128 foward and 128 backward (ex.: 10000000 = next, 00000000 = 128 backward, 11111111 = 128 foward, no address for current line )
  Circular Memory (wrapped around at begin and end)
  Trigered by rising edge of Ready Next Flag, returns value immediately
 *Adbsolute address
  16 bits/pins adresses (CPU output pins 51-58 (low) + 71-78 (high))
  1 pin for Ready Next (CPU output pins 60)
  Trigered by rising edge of Ready Next Flag, returns value immediately

-RAM
 256 pages of 256 values
 8 bits addresses and storage
 2 pin for Read or Write Flags (CPU output pins 40 and 30 respectively)
 8 bits/pins input paired with 8 bits/pins address output (CPU output pins 21-28) (CPU input pins 41-48)
 8 bits/pins output paired with 8 bits/pins address output (CPU output pins 21-28) (CPU output pins 31-38)
 Trigered by Read or Write Flags, returns value immediately
 Current page set by the value of register B
 
Instruction word format: AAAABBBBCCCCDDDD
$ - for registers location.
# - for ROM location.
@ - for RAM location.

Op-Codes (A [B [C]]): 
0000 - SET   - Set(BC)->$D                       //BC specifies a fixed value
0001 - GETA  - ReadAddr(@BC)->$D                 //BC specifies 8 bits address to fetch value from RAM to store in $D
0010 - SETA  - WriteAddr(@BC)<-$D                //BC specifies 8 bits address to store value to RAM from $D
0011 - IFNZ  - IfNotZero($B)goto#CD              //Branches if $B != 0, Goto relative 8 bits address CD
0100 - IFZ   - IfZero($B)goto#CD                 //Branches if $B == 0, Goto relative 8 bits address CD
0101 - SIF   - SkipIf($B=CD)                     //Skip the following instruction if $B == CD
0110 - ADD   - Add($B+$C)->$D                    //Add $B + $C and stores the result to $D
0111 - SUB   - Subtract($B-$C)->$D               //Substract $B - $C and stores the result to $D (using ones's complement) *Carry flag unreliable
1000 - AND   - And($B&$C)->$D                    //Conjunction of $B & $C set to $D
1001 - OR    - Or($B|$C)->$D                     //Disjunction of $B | $C set to $D
1010 - XOR   - Xor($B^$C)->$D                    //Exclusive disjunction of $B ^ $C set to $D
1011 - WJMP  - WideJump()goto#0000+BCD           //Goto absolute 16 bits address 0000+BCD (limited range, first 4K of ROM)
1100 - SETV  - WriteVal(@$B)<-CD                 //Write CD to RAM at address $B
1101 - GRT   - Greatest($B?$C)->$D               //Set $D to the greatest value between $B and $C
1110 - WJMPV - WideJumpVal()goto#$B+CD           //Goto absolute 16 bits address $B+CD (full 64K range)

1111 0000 - NOT   - Not($C)->$D                  //Negation of $C set to $D
1111 0001 - LSHT  - LeftShift($C)->$D            //Left Shift (the droped bit is sent to the carry flag)
1111 0010 - LROT  - LeftRotate($C)->$D           //Circular Left Shift (Left Rotate)
1111 0011 - RSHT  - RightShift($C)->$D           //Logical Right Shift (insert zero) (the droped bit is sent to the carry flag)
1111 0100 - RROT  - RightRotate($C)->$D          //Circular Right Shift (Right Rotate)
1111 0101 - SEQ   - SkipEqual($C=$D)             //Skip the following instruction if $C == $D
1111 0110 - JMPA  - JumpAddr()goto#CD            //Goto relative 8 bits address CD
1111 0111 - GETR  - ReadReg(@$C)->$D             //Fetch value from RAM at $C to store in $D
1111 1000 - SETR  - WriteReg(@$C)<-$D            //Write $D to RAM at address $C
1111 1001 - SGRT  - SkipGreater($C>$D)           //Skip the following instruction if $C > $D
1111 1010 - IFZR  - IfZeroReg($C)goto#$D         //Branches if $C == 0, Goto relative 8 bits address at $D
1111 1011 - WJMPR - WideJumpReg()goto#$C+$D      //Goto absolute 16 bits address $C$D (full 64K range)
1111 1100 - LROTC - LeftCrRot($C)->$D            //Circular Left Shift through Carry (Left Carry Rotate)
1111 1101 - RROTC - RightCrRot($C)->$D           //Circular Right Shift through Carry (Right Carry Rotate)
1111 1110 - RSHTA - RightArSht($C)->$D           //Arithmetic Right Shift (insert one) (the droped bit is sent to the carry flag)

1111 1111 0000 - JMPR  - JumpReg()goto#$D        //Goto relative address at $D
1111 1111 0001 - CFLG  - CarryFlg()->$D          //Output the value of the carry flag to a register
1111 1111 0010 - Unused
1111 1111 0011 - Unused
1111 1111 0100 - INC   - Increment($D)           //Increment $D by 1 and stores the result in $D
1111 1111 0101 - DEC   - Decrement($D)           //Decrement $D by 1 and stores the result in $D *Carry flag unreliable
1111 1111 0110 - SIFZ  - SkipZero($D)            //Skip the following instruction if $D == 0
1111 1111 0111 - RND   - Random()->$D            //Set $D to a Random value using a 16 bits LFSR
1111 1111 1000 - SIFNZ - SkipNotZero($D)         //Skip the following instruction if $D != 0
1111 1111 1001 - DSIZ  - DecSkipZero($D)         //Decrement $D by 1 if != 0, otherwise skip the following instruction if $D == 0
1111 1111 1010 - DSINZ - DecSkipNotZero($D)      //Decrement $D by 1 and then skip the following instruction if != 0
1111 1111 1011 - PUSH  - Push($D)                //Push $D to the top of the internal stack (it is 16 bytes deep, the overflow is dropped )
1111 1111 1100 - POP   - Pop($D)                 //Pop the value from the top of the internal stack to $D  (it is 16 bytes deep, the overflow is dropped )
1111 1111 1101 - Unused
1111 1111 1110 - Unused

1111 1111 1111 0000 - RSTC  - ResetCarry()       //Set the Carry Flag to 0x00
1111 1111 1111 0001 - SETC  - SetCarry()         //Set the Carry Flag to 0x01
1111 1111 1111 0010 - SIFNC - SkipNotCarry()     //Skip the following instruction if carry flag set
1111 1111 1111 0011 - RSTAR - ResetAllReg()      //Set all Registres to 0x00
1111 1111 1111 0100 - FLUSH - FlushStack()       //Set all values stored in the Stack to 0x00
1111 1111 1111 0101 - Unused                     // (0101 to 1101)
1111 1111 1111 1110 - HALT  - HALT()             //Pull pin 29 up to Halts the CPU until Pin 39 is set low
1111 1111 1111 1111 - NOP   - NOP()              //Does nothing D:


Alias
Copy($B)->$D accomplished with OR($B,$C)->$D where $C is the fixed value register 0x00000000 (Mnemonic CPY)
Erase()->$D accomplished with AND($B,$C)->$D where $B and $C are the fixed value register 0x00000000 and 0x11111111 (Mnemonic RST)


ToDo/Idea:
Improve error detection in Import, (Param counter, line counter)
New instruction SkipIfCarry ?
New instruction RngSeed from reg $D or RngSeed from line D
Improve carryflag on substraction 
